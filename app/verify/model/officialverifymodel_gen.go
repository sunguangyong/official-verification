// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	officialVerifyFieldNames          = builder.RawFieldNames(&OfficialVerify{})
	officialVerifyRows                = strings.Join(officialVerifyFieldNames, ",")
	officialVerifyRowsExpectAutoSet   = strings.Join(stringx.Remove(officialVerifyFieldNames, "`id`", "`create_time`", "`update_time`"), ",")
	officialVerifyRowsWithPlaceHolder = strings.Join(stringx.Remove(officialVerifyFieldNames, "`id`", "`create_time`", "`update_time`"), "=?,") + "=?"
)

type (
	officialVerifyModel interface {
		Insert(ctx context.Context, data *OfficialVerify) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*OfficialVerify, error)
		Update(ctx context.Context, data *OfficialVerify) error
		Delete(ctx context.Context, id int64) error
	}

	defaultOfficialVerifyModel struct {
		conn  sqlx.SqlConn
		table string
	}

	OfficialVerify struct {
		Id         int64          `db:"id"`
		VerifyInfo string         `db:"verify_info"` // 验证信息
		VerifyType string         `db:"verify_type"` // 验证类型
		SocialName sql.NullString `db:"social_name"` // 名称
		JobTiele   sql.NullString `db:"job_tiele"`   // 职位
		Creator    sql.NullString `db:"creator"`     // 创建人名称
		CreatorId  int64          `db:"creator_id"`  // 创建人id
		IsPay      sql.NullString `db:"is_pay"`      // 是否接受付款
		CreateTime time.Time      `db:"create_time"` // 创建时间
		UpdateTime time.Time      `db:"update_time"` // 修改时间
		IsDelete   int64          `db:"is_delete"`   // 删除标识 0 未删除 1 已删除
		Ctime      time.Time      `db:"ctime"`       // 创建时间
		Mtime      time.Time      `db:"mtime"`       // 修改时间
	}
)

func newOfficialVerifyModel(conn sqlx.SqlConn) *defaultOfficialVerifyModel {
	return &defaultOfficialVerifyModel{
		conn:  conn,
		table: "`official_verify`",
	}
}

func (m *defaultOfficialVerifyModel) Insert(ctx context.Context, data *OfficialVerify) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, officialVerifyRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.VerifyInfo, data.VerifyType, data.SocialName, data.JobTiele, data.Creator, data.CreatorId, data.IsPay, data.IsDelete, data.Ctime, data.Mtime)
	return ret, err
}

func (m *defaultOfficialVerifyModel) FindOne(ctx context.Context, id int64) (*OfficialVerify, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", officialVerifyRows, m.table)
	var resp OfficialVerify
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultOfficialVerifyModel) Update(ctx context.Context, data *OfficialVerify) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, officialVerifyRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.VerifyInfo, data.VerifyType, data.SocialName, data.JobTiele, data.Creator, data.CreatorId, data.IsPay, data.IsDelete, data.Ctime, data.Mtime, data.Id)
	return err
}

func (m *defaultOfficialVerifyModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultOfficialVerifyModel) tableName() string {
	return m.table
}
