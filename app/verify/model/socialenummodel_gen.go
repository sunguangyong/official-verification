// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	socialEnumFieldNames          = builder.RawFieldNames(&SocialEnum{})
	socialEnumRows                = strings.Join(socialEnumFieldNames, ",")
	socialEnumRowsExpectAutoSet   = strings.Join(stringx.Remove(socialEnumFieldNames, "`id`", "`create_time`", "`update_time`"), ",")
	socialEnumRowsWithPlaceHolder = strings.Join(stringx.Remove(socialEnumFieldNames, "`id`", "`create_time`", "`update_time`"), "=?,") + "=?"
)

type (
	socialEnumModel interface {
		Insert(ctx context.Context, data *SocialEnum) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*SocialEnum, error)
		Update(ctx context.Context, data *SocialEnum) error
		Delete(ctx context.Context, id int64) error
	}

	defaultSocialEnumModel struct {
		conn  sqlx.SqlConn
		table string
	}

	SocialEnum struct {
		Id         int64     `db:"id"`
		SocialName string    `db:"social_name"` // social name
		CreateTime time.Time `db:"create_time"` // 创建时间
		UpdateTime time.Time `db:"update_time"` // 修改时间
		IsDelete   int64     `db:"is_delete"`   // 删除标识 0 未删除 1 已删除
		Ctime      time.Time `db:"ctime"`       // 创建时间
		Mtime      time.Time `db:"mtime"`       // 修改时间
	}
)

func newSocialEnumModel(conn sqlx.SqlConn) *defaultSocialEnumModel {
	return &defaultSocialEnumModel{
		conn:  conn,
		table: "`social_enum`",
	}
}

func (m *defaultSocialEnumModel) Insert(ctx context.Context, data *SocialEnum) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?)", m.table, socialEnumRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.SocialName, data.IsDelete, data.Ctime, data.Mtime)
	return ret, err
}

func (m *defaultSocialEnumModel) FindOne(ctx context.Context, id int64) (*SocialEnum, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", socialEnumRows, m.table)
	var resp SocialEnum
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultSocialEnumModel) Update(ctx context.Context, data *SocialEnum) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, socialEnumRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.SocialName, data.IsDelete, data.Ctime, data.Mtime, data.Id)
	return err
}

func (m *defaultSocialEnumModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultSocialEnumModel) tableName() string {
	return m.table
}
